= Rails Pagination

Inspired in kaminari and will_paginate but more minimalistic

= Install

Put this line in your Gemfile:
  gem 'rails-pagination'
  
Then bundle:
  $ bundle
  
= Usage

The same approach as kaminari:
  Model.page(1).per(2)
  
But doesn't have any view helper, rather that force you to use an specific markup you can create your own using pretty simple helpers in the relation:
  - if collection.has_multiple_pages?
    #pager
      - if collection.has_first_page?
        %a.first{:href => url_for(request.query_parameters.merge(:p => collection.first_page))}= t('pager.first')
      - if collection.has_previous_page?
        %a.previous{:href => url_for(request.query_parameters.merge(:p => collection.previous_page))}= t('pager.previous')
      - navigation = collection.navigation_options(3)  
      - if navigation[:less_pages?]
        %span.ellipsis ...
      - for page in navigation[:range]
        - if collection.is_current_page? page
          %span.page.current= page     
        - else
          %a.page{:href => url_for(request.query_parameters.merge(:p => page))}= page 
      - if navigation[:more_pages?]
        %span.ellipsis ...  
      - if collection.has_next_page?
        %a.next{:href => url_for(request.query_parameters.merge(:p => collection.next_page))}= t('pager.next')    
      - if collection.has_last_page?
        %a.last{:href => url_for(request.query_parameters.merge(:p => collection.last_page))}= t('pager.last')